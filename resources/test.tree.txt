'#log>true

axiom => ^ { BRANCH }$

BRANCH => { RZ(-20,20) RX(-20,20) RY(-90,90) BRANCH }

BRANCH =>
	RY(-20,20)
	[
		RX(-40,-20) 
		RY(-30,30)
		RZ(-30,30)
		{ BRANCH }
	]
	[
		RX(20,40) 
		RY(-30,30)
		RZ(-30,30)
		{ BRANCH }
	]


BRANCH -> LEAF(tree);


^ ->
	var tmp, scale=rnd(3,5)*0.25,
		tree = extrude({ width:scale*2, ring:1, data:{ 
			length:scale*10,
			sx:0,
			sy:0,
			sz:0
		} })
		.setId(1)
		.rotateY(rnd(0, 360))
function LEAF(tree){
tree
	.color(1,1,1)
	.setWidth(0)
	.extrude()
	.setId(2.666)
	.rotateY( tree.data.sx>-20?180:0 )
	.rotateX( tree.data.sx*0.3 )
	.setWidth(10*scale)
	.translate(0,5*scale,0)
	.setRing(0.2)
	.extrude()
	.setId(2.333)
	.translate(0,5*scale,0)
	.extrude()
	.setId(2)
	.rotateX( tree.data.sx*0.2 )
	.setWidth(0)
	.translate(0,5*scale,0);	
}


RGB(1,2,3) -> 
	tree.color(1,2,3)
	;

RX(min,max) -> 
	tree.rotateX(tmp=rnd(min,max));
	tree.data.sx += tmp
	;

RY(min,max) -> 
	tree.rotateY(tmp=rnd(min,max));
	tree.data.sy += tmp
	;

RZ(min,max) -> 
	tree.rotateZ(tmp=rnd(min,max));
	tree.data.sz += tmp
	;


[ -> tree.push("sx", "sy", "sz")
	;

] -> tree.pop()
	;

{ ->
	tree = tree.extrude().mulWidth( rnd(0.5,0.7) );
	tree.data.length *= rnd(0.5, 0.7);
	tree.translate(0, tree.data.length, 0)
	;

} ->
	tree = tree.parent;

$ -> ;